        -:    0:Source:/Users/nikhil/Documents/CS206_SoftwareTesting/SoftwareTestingProject/cs206-project-defectdetective/benchmarks/printtokens2/printtokens2.c
        -:    0:Graph:printtokens2.gcno
        -:    0:Data:printtokens2.gcda
        -:    0:Runs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#include <stdlib.h>
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:
function main called 1 returned 0% blocks executed 73%
        1:   22:int main(argc,argv)
        -:   23:int argc;
        -:   24:char *argv[3];
        -:   25:{  char *fname;
        -:   26:   token tok;
        -:   27:   token_stream tp;
        1:   28:     if(argc==1)                  /* if not given filename,take as '""' */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   29:       {
        1:   30:        fname= (char *) malloc(sizeof(char));
        1:   31:        *fname = '\0'; 
        -:   32:       }
    #####:   33:     else if(argc==2)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   34:        fname= argv[1];
        -:   35:     else
    #####:   36:       { fprintf(stdout, "Error!,please give the token stream\n");
call    0 never executed
    #####:   37:         exit(0);
call    0 never executed
        -:   38:       }
        1:   39:    tp=open_token_stream(fname);  /* open token stream */
call    0 returned 100%
        1:   40:    tok=get_token(tp);
call    0 returned 100%
        2:   41:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
        -:   42:    {
        1:   43:       print_token(tok);
call    0 returned 100%
        1:   44:       tok=get_token(tp);
call    0 returned 100%
        -:   45:    }
        1:   46:    print_token(tok); /* print eof signal */
call    0 returned 100%
        1:   47:    exit(0);
        -:   48:}
        -:   49:
        -:   50:/* stream.c code */
        -:   51:
        -:   52:/***********************************************/
        -:   53:/* NMAE:	open_character_stream          */
        -:   54:/* INPUT:       a filename                     */
        -:   55:/* OUTPUT:      a pointer to chacracter_stream */
        -:   56:/* DESCRIPTION: when not given a filename,     */
        -:   57:/*              open stdin,otherwise open      */
        -:   58:/*              the existed file               */
        -:   59:/***********************************************/
function open_character_stream called 1 returned 100% blocks executed 50%
        1:   60:character_stream open_character_stream(fname)
        -:   61:char *fname;
        -:   62:{ character_stream fp;
        1:   63:  if(fname == NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   64:     fp=stdin;
    #####:   65:  else if ((fp=fopen(fname,"r"))== NULL)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -:   66:  {
    #####:   67:       fprintf(stdout, "The file %s doesn't exists\n",fname);
call    0 never executed
    #####:   68:       exit(0);
call    0 never executed
        -:   69:  }
        1:   70:  return(fp);
        -:   71:}
        -:   72:
        -:   73:/**********************************************/
        -:   74:/* NAME:	get_char                      */
        -:   75:/* INPUT:       a pointer to char_stream      */
        -:   76:/* OUTPUT:      a character                   */
        -:   77:/**********************************************/
function get_char called 15 returned 100% blocks executed 100%
       15:   78:char get_char(fp)
        -:   79:character_stream fp;
        -:   80:{ char ch;
       15:   81:  ch=getc(fp);
call    0 returned 100%
       15:   82:  return(ch);
        -:   83:}
        -:   84:
        -:   85:/***************************************************/
        -:   86:/* NAME:      unget_char                           */
        -:   87:/* INPUT:     a pointer to char_stream,a character */
        -:   88:/* OUTPUT:    a character                          */
        -:   89:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   90:/***************************************************/
function unget_char called 1 returned 100% blocks executed 80%
        1:   91:char unget_char(ch,fp)
        -:   92:character_stream fp;
        -:   93:char ch;
        -:   94:{ char c;
        1:   95:  c=ungetc(ch,fp);
call    0 returned 100%
        1:   96:  if(c ==EOF)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   97:    {
        1:   98:     return(c);
        -:   99:    }
        -:  100:  else
    #####:  101:     return(c);
        -:  102:}
        -:  103:
        -:  104:/* tokenizer.c code */
        -:  105:
        -:  106:
        -:  107:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  108:
        -:  109:
        -:  110:static int is_spec_symbol();
        -:  111:static int is_token_end();
        -:  112:static int unget_error();
        -:  113:static int is_keyword();
        -:  114:static int is_identifier();
        -:  115:static int is_num_constant();
        -:  116:static int is_char_constant();
        -:  117:static int is_str_constant();
        -:  118:static int is_comment();
        -:  119:static void print_spec_symbol();
        -:  120:
        -:  121:/********************************************************/
        -:  122:/* NAME:	open_token_stream                       */
        -:  123:/* INPUT:       a filename                              */
        -:  124:/* OUTPUT:      a pointer to a token_stream             */
        -:  125:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  126:/*              input device as input source            */
        -:  127:/********************************************************/
function open_token_stream called 1 returned 100% blocks executed 80%
        1:  128:token_stream open_token_stream(fname)
        -:  129:char *fname;
        -:  130:{
        -:  131: token_stream fp;
        1:  132: if(strcmp(fname,"")==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  133:    fp=open_character_stream(NULL);
call    0 returned 100%
        -:  134: else
    #####:  135:    fp=open_character_stream(fname);
call    0 never executed
        1:  136: return(fp);
        -:  137:}
        -:  138:
        -:  139:/********************************************************/
        -:  140:/* NAME :	get_token                               */
        -:  141:/* INPUT: 	a pointer to the tokens_stream          */
        -:  142:/* OUTPUT:      a token                                 */
        -:  143:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  144:/*              with different case  and get one token  */
        -:  145:/********************************************************/
function get_token called 2 returned 100% blocks executed 59%
        2:  146:token get_token(tp)
        -:  147:token_stream tp;
        -:  148:{ 
        2:  149:  int i=0,j;
        2:  150:  int id=0;
        -:  151:  char ch,ch1[2];
      164:  152:  for (j=0;j<=80;j++)          /* initial the buffer   */
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      162:  153:      { buffer[j]='\0';} 
        2:  154:   ch1[0]='\0';
        2:  155:   ch1[1]='\0';
        2:  156:   ch=get_char(tp);
call    0 returned 100%
        2:  157:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
        -:  158:      {
    #####:  159:       ch=get_char(tp);
call    0 never executed
        -:  160:      } 
        2:  161:   buffer[i]=ch;
        2:  162:   if(is_eof_token(buffer)==TRUE)return(buffer);
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       1*:  163:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       1*:  164:   if(ch =='"')id=1;    /* prepare for string */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  165:   if(ch ==59)id=2;    /* prepare for comment */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  166:   ch=get_char(tp);
call    0 returned 100%
        -:  167:
       13:  168:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
call    0 returned 100%
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
        -:  169:   {
       12:  170:       i++;
       12:  171:       buffer[i]=ch;
       12:  172:       ch=get_char(tp);
call    0 returned 100%
        -:  173:   }
        1:  174:   ch1[0]=ch;                        /* hold the end charcater          */
        1:  175:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  176:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
call    0 returned 100%
        1:  177:        if(ch==EOF)unget_error(tp);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:  178:        return(buffer);
        -:  179:      }
    #####:  180:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  181:      { ch=unget_char(ch,tp);        /* then put back this character       */
call    0 never executed
    #####:  182:        if(ch==EOF)unget_error(tp);
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    #####:  183:        return(buffer);
        -:  184:      }
    #####:  185:   if(id==1)                  /* if end character is " and is string */
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  186:     { i++;                     /* case,hold the second " in buffer    */
    #####:  187:       buffer[i]=ch;
    #####:  188:       return(buffer); 
        -:  189:     }
    #####:  190:   if(id==0 && ch==59)
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -:  191:                                   /* when not in string or comment,meet ";" */
    #####:  192:     { ch=unget_char(ch,tp);       /* then put back this character         */
call    0 never executed
    #####:  193:       if(ch==EOF) unget_error(tp);
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
        -:  194:       
    #####:  195:       return(buffer); 
        -:  196:     }
    #####:  197:  return(buffer);                   /* return nomal case token             */
        -:  198:}
        -:  199:
        -:  200:/*******************************************************/
        -:  201:/* NAME:	is_token_end                           */
        -:  202:/* INPUT:       a character,a token status             */
        -:  203:/* OUTPUT:	a BOOLEAN value                        */
        -:  204:/*******************************************************/
function is_token_end called 13 returned 100% blocks executed 62%
       13:  205:static int is_token_end(str_com_id,ch)
        -:  206:char ch;
        -:  207:int str_com_id;
        -:  208:{ char ch1[2];  /* fixed array declaration MONI */
       13:  209: ch1[0]=ch;
       13:  210: ch1[1]='\0';
       13:  211: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       12:  212: if(str_com_id==1)          /* is string token */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  213:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  214:         return(TRUE);
        -:  215:      else
    #####:  216:         return(FALSE);
        -:  217:    }
        -:  218:
       12:  219: if(str_com_id==2)    /* is comment token */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  220:   { if(ch=='\n')     /* for comment until meet end of line */
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  221:        return(TRUE);
        -:  222:      else
    #####:  223:        return(FALSE);
        -:  224:   }
        -:  225:
      12*:  226: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      12*:  227: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  228:                              /* others until meet blank or tab or 59 */
       12:  229: return(FALSE);               /* other case,return FALSE */
        -:  230:}
        -:  231:
        -:  232:/****************************************************/
        -:  233:/* NAME :	token_type                          */
        -:  234:/* INPUT:       a pointer to the token              */
        -:  235:/* OUTPUT:      an integer value                    */
        -:  236:/* DESCRIPTION: the integer value is corresponding  */
        -:  237:/*              to the different token type         */
        -:  238:/****************************************************/
function token_type called 2 returned 100% blocks executed 73%
        2:  239:static int token_type(tok)
        -:  240:token tok;
        -:  241:{ 
       2*:  242: if(is_keyword(tok))return(keyword);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  243: if(is_spec_symbol(tok))return(spec_symbol);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  244: if(is_identifier(tok))return(identifier);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  245: if(is_num_constant(tok))return(num_constant);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  246: if(is_str_constant(tok))return(str_constant);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  247: if(is_char_constant(tok))return(char_constant);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       2*:  248: if(is_comment(tok))return(comment);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        2:  249: if(is_eof_token(tok))return(end);
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  250: return(error);                    /* else look as error token */
        -:  251:}
        -:  252:
        -:  253:/****************************************************/
        -:  254:/* NAME:	print_token                         */
        -:  255:/* INPUT:	a pointer to the token              */
        -:  256:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  257:/*              according the forms required        */
        -:  258:/****************************************************/
function print_token called 2 returned 100% blocks executed 67%
        2:  259:int print_token(tok)
        -:  260:token tok;
        -:  261:{ int type;
        2:  262:  type=token_type(tok);
call    0 returned 100%
        2:  263: if(type==error)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  264:   { fprintf(stdout, "error,\"%s\".\n",tok);
call    0 returned 100%
        -:  265:   } 
        2:  266: if(type==keyword)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  267:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
call    0 never executed
        -:  268:   }
       2*:  269: if(type==spec_symbol)print_spec_symbol(tok);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:  270: if(type==identifier)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  271:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
call    0 never executed
        -:  272:   }
        2:  273: if(type==num_constant)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  274:   {fprintf(stdout, "numeric,%s.\n",tok);
call    0 never executed
        -:  275:   }
        2:  276: if(type==str_constant)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  277:   {fprintf(stdout, "string,%s.\n",tok);
call    0 never executed
        -:  278:   }
        2:  279: if(type==char_constant)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  280:   {tok=tok+1;
    #####:  281:    fprintf(stdout, "character,\"%s\".\n",tok);
call    0 never executed
        -:  282:   }
        2:  283: if(type==end) 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  284:   fprintf(stdout, "eof.\n");
call    0 returned 100%
        2:  285:   }
        -:  286:
        -:  287:/* the code for tokens judgment function */
        -:  288:
        -:  289:/*************************************/
        -:  290:/* NAME:	is_eof_token         */
        -:  291:/* INPUT: 	a pointer to a token */
        -:  292:/* OUTPUT:      a BOOLEAN value      */
        -:  293:/*************************************/
function is_eof_token called 20 returned 100% blocks executed 100%
       20:  294:int is_eof_token(tok)
        -:  295:token tok;
        -:  296:{ 
       20:  297:  if( *tok==EOF)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        5:  298:      return(TRUE);
        -:  299:  else
       15:  300:      return(FALSE);
        -:  301:}
        -:  302:
        -:  303:/*************************************/
        -:  304:/* NAME:	is_comment           */
        -:  305:/* INPUT: 	a pointer to a token */
        -:  306:/* OUTPUT:      a BOOLEAN value      */
        -:  307:/*************************************/
function is_comment called 2 returned 100% blocks executed 75%
        2:  308:static int is_comment(ident)
        -:  309:token ident;
        -:  310:{
        2:  311:  if( (*ident) ==59 )   /* the char is 59   */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  312:     return(TRUE);
        -:  313:  else
        2:  314:     return(FALSE);
        -:  315:}
        -:  316:
        -:  317:/*************************************/
        -:  318:/* NAME:	is_keyword           */
        -:  319:/* INPUT: 	a pointer to a token */
        -:  320:/* OUTPUT:      a BOOLEAN value      */
        -:  321:/*************************************/
function is_keyword called 2 returned 100% blocks executed 89%
        2:  322:static int is_keyword(str)
        -:  323:    token  str;
        -:  324:{ 
        2:  325: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2:  326:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  327:      return(TRUE);
        -:  328:  else 
        2:  329:      return(FALSE);
        -:  330:}
        -:  331:
        -:  332:/*************************************/
        -:  333:/* NAME:	is_char_constant     */
        -:  334:/* INPUT: 	a pointer to a token */
        -:  335:/* OUTPUT:      a BOOLEAN value      */
        -:  336:/*************************************/
function is_char_constant called 2 returned 100% blocks executed 60%
        2:  337:static int is_char_constant(str)
        -:  338:    token str;
        -:  339:{
       2*:  340:  if ((*str)=='#' && isalpha(*(str+1)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  341:     return(TRUE);
        -:  342:  else  
        2:  343:     return(FALSE);
        -:  344:}
        -:  345:
        -:  346:/*************************************/
        -:  347:/* NAME:	is_num_constant      */
        -:  348:/* INPUT: 	a pointer to a token */
        -:  349:/* OUTPUT:      a BOOLEAN value      */
        -:  350:/*************************************/
function is_num_constant called 2 returned 100% blocks executed 33%
        2:  351:static int is_num_constant(str)
        -:  352:    token  str;
        -:  353:{
        2:  354:  int i=1;
        -:  355:  
        2:  356:  if ( isdigit(*str)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  357:    {
    #####:  358:    while ( *(str+i) != '\0' )   /* until meet token end sign */
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  359:      {
    #####:  360:       if(isdigit(*(str+i)))
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  361:         i++;
        -:  362:       else
    #####:  363:         return(FALSE);
        -:  364:      }                         /* end WHILE */
    #####:  365:    return(TRUE);
        -:  366:    }
        -:  367:  else
        2:  368:   return(FALSE);               /* other return FALSE */
        -:  369:}
        -:  370:
        -:  371:/*************************************/
        -:  372:/* NAME:	is_str_constant      */
        -:  373:/* INPUT: 	a pointer to a token */
        -:  374:/* OUTPUT:      a BOOLEAN value      */
        -:  375:/*************************************/
function is_str_constant called 2 returned 100% blocks executed 33%
        2:  376:static int is_str_constant(str)
        -:  377:    token str;
        -:  378:{
        2:  379:  int i=1;
        -:  380: 
        2:  381:  if ( *str =='"')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  382:     { while (*(str+i)!='\0')  /* until meet the token end sign */
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  383:         { if(*(str+i)=='"')
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  384:             return(TRUE);        /* meet the second '"'           */
        -:  385:           else
    #####:  386:           i++;
        -:  387:         }               /* end WHILE */
    #####:  388:     return(FALSE);
        -:  389:    }
        -:  390:  else
        2:  391:    return(FALSE);       /* other return FALSE */
        -:  392:}
        -:  393:/*************************************/
        -:  394:/* NAME:	is_identifier         */
        -:  395:/* INPUT: 	a pointer to a token */
        -:  396:/* OUTPUT:      a BOOLEAN value      */
        -:  397:/*************************************/
function is_identifier called 2 returned 100% blocks executed 30%
        2:  398:static int is_identifier(str)
        -:  399:    token  str;
        -:  400:{
        2:  401:  int i=1;
        -:  402:
        2:  403:  if ( isalpha( *str) ) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  404:     {
    #####:  405:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
branch  0 never executed
branch  1 never executed (fallthrough)
        -:  406:           { 
    #####:  407:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  408:               i++;
        -:  409:            else
    #####:  410:               return(FALSE);
        -:  411:           }      /* end WHILE */
    #####:  412:     return(TRUE);
        -:  413:     }
        -:  414:  else
        2:  415:     return(FALSE);
        -:  416:}
        -:  417:
        -:  418:/******************************************/
        -:  419:/* NAME:	unget_error               */
        -:  420:/* INPUT:       a pointer to token stream */
        -:  421:/* OUTPUT: 	print error message       */
        -:  422:/******************************************/
function unget_error called 1 returned 100% blocks executed 100%
        1:  423:static int unget_error(fp)
        -:  424:character_stream *fp;
        -:  425:{
        1:  426:fprintf(stdout,"It can not get charcter\n");
call    0 returned 100%
        1:  427:}
        -:  428:
        -:  429:/*************************************************/
        -:  430:/* NAME:        print_spec_symbol                */
        -:  431:/* INPUT:       a pointer to a spec_symbol token */
        -:  432:/* OUTPUT :     print out the spec_symbol token  */
        -:  433:/*              according to the form required   */
        -:  434:/*************************************************/
function print_spec_symbol called 0 returned 0% blocks executed 0%
    #####:  435:static void print_spec_symbol(str)
        -:  436:token str;
        -:  437:{
    #####:  438:    if      (!strcmp(str,"("))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  439:    {
    #####:  440:             fprintf(stdout, "%s\n","lparen.");
call    0 never executed
    #####:  441:             return;
        -:  442:    } 
    #####:  443:    if (!strcmp(str,")"))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  444:    {
    #####:  445:             fprintf(stdout, "%s\n","rparen.");
call    0 never executed
    #####:  446:             return;
        -:  447:    }
    #####:  448:    if (!strcmp(str,"["))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  449:    {
    #####:  450:             fprintf(stdout, "%s\n","lsquare.");
call    0 never executed
    #####:  451:             return;
        -:  452:    }
    #####:  453:    if (!strcmp(str,"]"))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  454:    {
    #####:  455:             fprintf(stdout, "%s\n","rsquare.");
call    0 never executed
    #####:  456:             return;
        -:  457:    }
    #####:  458:    if (!strcmp(str,"'"))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  459:    {
    #####:  460:             fprintf(stdout, "%s\n","quote.");
call    0 never executed
    #####:  461:             return;
        -:  462:    }
    #####:  463:    if (!strcmp(str,"`"))
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  464:    {
    #####:  465:             fprintf(stdout, "%s\n","bquote.");
call    0 never executed
    #####:  466:             return;
        -:  467:    }
        -:  468:    
    #####:  469:             fprintf(stdout, "%s\n","comma.");
call    0 never executed
        -:  470:}
        -:  471:
        -:  472:
        -:  473:/*************************************/
        -:  474:/* NAME:        is_spec_symbol       */
        -:  475:/* INPUT:       a pointer to a token */
        -:  476:/* OUTPUT:      a BOOLEAN value      */
        -:  477:/*************************************/
function is_spec_symbol called 15 returned 100% blocks executed 56%
       15:  478:static int is_spec_symbol(str)
        -:  479:    token str;
        -:  480:{
       15:  481:    if (!strcmp(str,"("))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  482:    {  
    #####:  483:        return(TRUE);
        -:  484:    }
       15:  485:    if (!strcmp(str,")"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  486:    {
    #####:  487:        return(TRUE);
        -:  488:    }
       15:  489:    if (!strcmp(str,"["))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  490:    {
    #####:  491:        return(TRUE);
        -:  492:    }
       15:  493:    if (!strcmp(str,"]"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  494:    {
    #####:  495:        return(TRUE);
        -:  496:    }
       15:  497:    if (!strcmp(str,"'"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  498:    {
    #####:  499:        return(TRUE);
        -:  500:    }
       15:  501:    if (!strcmp(str,"`"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  502:    {
    #####:  503:        return(TRUE);
        -:  504:    }
       15:  505:    if (!strcmp(str,","))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  506:    {
    #####:  507:        return(TRUE);
        -:  508:    }
       15:  509:    return(FALSE);     /* others return FALSE */
        -:  510:}
        -:  511:
        -:  512:
